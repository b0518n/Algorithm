// 풀이
// i : 1 ~ n - 2 , j : i + 1 ~ n - 1, k : j + 1 ~ n
// 예를 들어 n이 7이라고 하면,
// i : 1 j : 2 k : 3 ~ 7 5개
//       j : 3 k : 4 ~ 7 4개
//       j : 4 k : 5 ~ 7 3개
//       j : 5 k : 6 ~ 7 2개
//       j : 6 k : 7     1개
// i : 2 j : 3 k : 4 ~ 7 4개 ...
// 이러한 패턴이 반복 되는데,
// i가 1일때는 1부터 ~ 5까지의 합
// i가 2일때는 1부터 ~ 4까지의 합 ...
// i가 n - 2일때는 1부터 ~ n - 4까지의 합 ... 일반식이 도출된다.
// ∑ ∑ x 와 같은 식으로 표현 가능한데 처음 시그마는 1부터 n - 2까지 범위이고, 두번째는 1부터 k까지 범위입니다.
// ∑ (n * (n + 1)) / 2
// 1 / 2 * ∑ n^2 + n
// ∑ n^2 = n * (n + 1) (2n + 1) / 6 이므로,
// n * (n - 1) * (n - 2) / 6이라는 식을 도출해낼 수 있음.
// 주의점 : count에 숫자를 넣을 때 long형식으로 변환 시키거나 애초에 입력을 받을 때 long형식으로 받을 것.
// 숫자의 연산 시 가장 큰 숫자 표현 형식을 따라가기 때문, 만약 count 오른쪽 부분을 형식 변환없이 long형식에 넣을 경우 오답 발생.
using System.Numerics;

int n = int.Parse(Console.ReadLine());
long count = (long)n * (n - 1) * (n - 2) / 6;

Console.WriteLine(count);
Console.WriteLine(3);